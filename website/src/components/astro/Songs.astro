---

import { author } from "@data/author"
const { spotifyId } = author // André Valério artist ID

const TOKEN_URL = "/api/spotify"

const getSpotifyToken = async (): Promise<string> => {
    const baseURL = import.meta.env.PUBLIC_SITE_URL || "http://localhost:4321"; 
    const response = await fetch(`${baseURL}/api/spotify`);
    const data = await response.json();
    return data.access_token;
};


// Spotify Access token for API calls
const accessToken = await getSpotifyToken();

const market = "BR" // Example: BR+ES
const limit = "10"

const ALBUM_URL = `https://api.spotify.com/v1/artists/${spotifyId}/albums?market=${market}&limit=${limit}`

// Album types
interface Album {
  id: string
  name: string
  release_date: string
  images: { url: string }[]
}

interface AlbumResponse {
  items: Album[]
}

const fetchAlbums = async (): Promise<AlbumResponse> => {
    const response = await fetch(ALBUM_URL, {
        method: "GET",
        headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json',
        },
    });

    if (!response.ok) {
        if (response.status === 401) {
            throw new Error('Unauthorized - Token may be expired or invalid. Please check your authentication.')
        } else {
            throw new Error('Error searching albums')
        }
    };

    return await response.json(); // Response
};

const albums = await fetchAlbums();

---

<div>
    {albums.items && albums.items.length > 0 ? (
      <ul>
        {albums.items.map((album: Album) => (
          <li>
            <h2>{album.name}</h2>
            <p>{album.release_date}</p>
            <img src={album.images[0]?.url} alt={album.name} width="200" />
          </li>
        ))}
      </ul>
    ) : (
      <p>Sem álbuns disponíveis</p>
    )}
</div>