---
// * Components
import Layout from '@layouts/Normal.astro';
import MainContent from '@components/_pages/index.astro';

// * Utils
import { fetchAlbums } from '@utils/Spotify';
import { formatAlbums } from "@utils/Album";

// * Data & Types
import Pages from '@data/constants/pages';
import Imgs from '@data/constants/imgs';
import { author } from '@data/constants/author';
import type { Props as seoProps } from "astro-seo";

const Banner = Imgs.local.banner;

const limit = String(50); // Max: 50
const ALBUM_URL = `https://api.spotify.com/v1/artists/${author.spotifyId}/albums?limit=${limit}`

const albums = await fetchAlbums(ALBUM_URL); // Should return { items: [...] }
// console.debug('Albums:', albums.items);

const disallowed: string[] = ['6gVncgomPUoXXQHvWzpRT0'];

const albumsSchema = formatAlbums(albums, disallowed);// console.debug('Albums Schema:', albumsSchema);

const Shared = {
    title: `${author.name} - ${author.job}`,
    description: `${author.name} Oficial website, ${author.job}. Discover my music, videos, and more.`,
};

const seo: seoProps = {
    title: Shared.title,
    description: Shared.description,
    canonical: `${import.meta.env.SITE}`,
    twitter: {
        card: 'summary_large_image',
        site: `${Pages.social.arroba.twitter}`,
        creator: `${Pages.social.arroba.twitter}`,
        title: Shared.title,
        description: Shared.description,
        image: Banner.url,
        imageAlt: `${author.name} official banner`,
    },
    openGraph: {
        basic: {
            title: Shared.title,
            url: `${import.meta.env.SITE}`,
            image: Banner.url.toString(),
            type: 'website',
        },
        image: {
            url: Banner.url,
            secureUrl: Banner.url,
            alt: `${author.name} official banner`,
            type: `image/${Banner.format}`,
            width: Number(Banner.width),
            height: Number(Banner.height),
        },
        optional: {
            siteName: Shared.title,
            description: Shared.description,
            locale: 'en_CA',
            audio: Imgs.audio.tempestuoso,
            video: 'https://youtu.be/PwFLA4nb74I', // Lessons video link in YT
            // localeAlternate: ['en_US', 'en'],
        },
    }
};

const schema = {
    item: {
        '@context': 'https://schema.org',
        '@type': 'Person',
        name: `${author.name}`,
        alternateName: `${author.altName}`,
        url: import.meta.env.SITE,
        image: `${Imgs.cdn.pic}`,
        jobTitle: author.job,
        genre: author.musicGenre,
        sameAs: Object.entries(Pages.social)
            .filter(([key, value]) => key !== 'arroba' && typeof value === 'string')
            .map(([, value]) => value),
        description: Shared.description,
        address: {
            '@type': 'PostalAddress',
            addressLocality: 'Toronto',
            addressCountry: 'CA',
        },
        birthDate: `${author.birthDate}`,
        birthPlace: {
            '@type': 'Place',
            name: `${author.birthPlace}`,
        },
        albums: albumsSchema,
    },
};
// console.debug('Schema:', schema.item);

---

<Layout seo={seo} schema={schema} scrollPosition={950} >
    <MainContent />
</Layout>
